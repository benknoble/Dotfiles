# vim: noet:sw=8:sts=8:fdm=indent
[alias]
	amend = commit --amend
	b = branch
	bd = branch --delete
	bdf = branch --delete --force
	ca = commit --all
	cc = commit
	ce = config --edit
	changed = diff --name-only
	cm = commit --message
	co = checkout
	conflict = log --oneline --left-right --merge
	cp = cherry-pick
	ctags = hooks run ctags
	d = diff
	dc = diff --cached
	ds = diff --stat
	g = !exec git
	git = !exec git
	grall = graph --all
	graph = graph-long --oneline
	graph-long = log --graph
	h = help
	ig = check-ignore
	igv = ig --verbose
	intend = add --intent-to-add
	j = jump
	logp = log --graph --abbrev-commit --pretty=mine
	logpall = logp --all
	lol = log --oneline
	lup = log HEAD@{upstream}..
	lupp = log HEAD@{upstream}.. --patch
	merc = merge --no-ff
	merf = merge --ff-only
	name-when-merged = "!f() { git when-merged -c \"$@\" | git name-rev --stdin;}; f"
	newb = checkout -b
	patch = add --patch
	r = rebase
	rc = rebase --continue
	remerf = "!f() { git rebase \"$1\" \"$2\"; git checkout \"$1\"; git merge --ff-only \"$2\"; }; f"
	rems = for-each-ref --sort=-committerdate --format=\"%(refname:short)\t%(color:red)%(authorname)\t%(color:blue)%(authordate:relative)%(color:reset)\" refs/remotes
	ri = rebase --interactive
	riu = rebase --interactive HEAD@{upstream}
	s = status --short
	sb = show-branch
	sbu = sb HEAD HEAD@{upstream}
	sdiff = diff && git submodule foreach 'git diff'
	spush = push --recurse-submodules=on-demand
	sr = status --short --branch
	standup = "!f() { git log --author=$USER --since=yesterday --all --format=%s; }; f"
	stat = status
	supdate = submodule update --remote --checkout
	tags = tag --list
	tagss = "!f() { git tags \"$@\" | xargs git show; }; f"
	unstage = reset HEAD --
	visual = !gitk --all &

# core
[core]
	excludesFile = ~/.gitignore_global
	attributesFile = ~/.gitattributes
	pager = less -FRX
[init]
	templateDir = ~/.git_template
	defaultBranch = main

# remotes
[fetch]
	recurseSubmodules = on-demand
	prune = true
	writeCommitGraph = true
[push]
	recurseSubmodules = check
[pull]
	ff = only
	; rebase = merges
[submodule]
	fetchJobs = 4

# diffs and merges
[diff]
	submodule = log
	tool = fugitive
	colorMoved = default
	mnemonicprefix = true
[diff "json"]
	textconv = "f(){ gron \"$1\" 2>/dev/null || cat \"$1\"; }; f"
[diff "yq"]
	textconv = "f(){ yq -P eval 'sorkt_keys(..)' \"$1\" 2>/dev/null || cat \"$1\"; }; f"
[difftool]
	prompt = no
[difftool "fugitive"]
	cmd = vim --nofork +\"Git difftool -- $MERGED\" +cclose
[merge]
	tool = fugitive
	conflictstyle = zdiff3
	log = true
[mergetool]
	prompt = no
	keepBackup = false
[mergetool "fugitive"]
	cmd = vim --nofork +\"Git mergetool -- $MERGED\" +cclose
	trustExitCode = true
[rerere]
	enabled = true

# interface
[advice]
	waitingForEditor = false
[grep]
	lineNumber = true
	column = true
[pretty]
	mine = %C(yellow)%h%Creset%C(bold green)%d%Creset %s (%C(magenta)authored: %ar%Creset, %C(red)committed: %cr%Creset) %C(ul bold cyan)<%an>%Creset
[rebase]
	autoSquash = true
[status]
	submodulesummary = 1
	showstash = true
[sendemail]
	multiedit = true
	annotate = true
	confirm = auto

# external: lfs
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

# external: gitsh
[gitsh]
	prompt = "%D (%c%b %#%w) %G>"
	noGreeting = true
	defaultCommand = status -s
[gitsh "color"]
	default = cyan

# user config
[user]
	useConfigOnly = true

# includes
[include]
	path = ~/.gitconfig.local
