if &compatible
  set nocompatible
endif

" Personal config
let s:personal=expand('~/.personal/vimrc')
if filereadable(s:personal)
  exec "source" s:personal
endif

" Options {{{

" Leader {{{
" Set <Leader> used for mappings
let mapleader=" "
" And <LocalLeader> for buffer mappings
let maplocalleader="\\"
" End Leader }}}

" Allow backspacking over everything in insert mode
set backspace=indent,eol,start

" Keep 200 lines of command history
set history=200

" Update faster
set updatetime=250

" Viminfo {{{
" Keep marks
set viminfo+=f1
if exists("&viminfofile")
  set viminfofile=$HOME/.viminfo
endif
" End Viminfo }}}

" Status display {{{
" Show the cursor position all the time
set ruler
" And highlight the line it's on
set cursorline
" Display incomplete commands
set showcmd
" Always display status line
set laststatus=2
" End status display }}}

" Command-line quickly {{{
" Display completion matches in the status line
set wildmenu
set wildmode=longest,full
" Stop, for the love of god, 'finding' headers!
set path-=/usr/include
" End Command-line quickly }}}

" Timeout {{{
" Time out for key codes
set ttimeout
" Wait up to 100ms after <Esc> for special key
set ttimeoutlen=100
" But 3000ms (3s) for mappings
set timeoutlen=3000
" End Timeout }}}

" Window Display {{{
if has("patch-7.4.2109")
  " Show @@@ in the last line if it is truncated
  set display=truncate
else
  set display=lastline
endif
" Show a few lines of context around the cursor. Note that this makes the text
" scroll if you mouse-click near the start or end of the window
set scrolloff=5
" Diff vertically
set diffopt+=vertical
" Open help files at height lines - 10
let &helpheight=(&lines - 10)
" Don't equalize window sizes automatically
set noequalalways

" Display line/rel numbers by default
set number relativenumber

" Don't update while running macros
set lazyredraw
" End Window Display }}}

" Do not recognize octal number for Ctrl-A and Ctrl-K
set nrformats-=octal

" Tabs {{{
" Tab settings: 4 spaces (unless overriden by ftplugin)
" A Tab character has length 8
set tabstop=8
" Use spaces when pressing Tab in insert
set expandtab
" Used for indent-features ('<<' and the like)
set shiftwidth=4
" Round < and the like to nearest shiftwidth
set shiftround
" Backspace over 4 spaces if possible
set softtabstop=4
" Use 'autoindent', which mostly does what you want and stays out of your way
set autoindent
" End Tabs }}}

" Wrap {{{
set textwidth=80
" Wrap lines that are too long (off by default)
set nowrap
" Show wrapped lines with a marker in front
let &showbreak='» '
" Break at word boundaries
set linebreak
" Allow movements Left and Right to move over wrapped lines
set whichwrap=b,s,<,>,[,]
" End Wrap }}}

" Display certain whitespace characters
set list listchars=tab:»\ ,trail:·,nbsp:⎵

" Set dark background because I like my terminal dark
if ! exists('g:colors_name')
  set background=dark
endif

" Confirm potentially problematic operations
" Like quitting without writing
set confirm

" Show matching ()[]{} braces
set showmatch

" Search {{{
" Ignore case in /? searches
set ignorecase
" Unless capitals are present
set smartcase
" Highlight searches
set hlsearch
" End Search }}}

" Completion {{{
" Complete from dictionary if spell on
set complete+=kspell

" Make matching handle case better
set infercase
" End Completion }}}

" Make buffers hidden when unloaded, just in case you want them back
set hidden

" Folds {{{
" Use {{{,}}} for marking folds
set foldmethod=marker

" Start with no folds
" Toggle with `zi`
set nofoldenable
" End Folds }}}

" Complex options {{{

" Win32 Gui {{{
" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
if has('win32')
  set guioptions-=t
endif
" End Win32 GUI }}}

" Incremental Search {{{
" Do incremental searching when it's possible to timeout
if has('reltime')
  set incsearch
endif
" End Incremental Search }}}

" +mouse {{{
if has('mouse')
  set mouse=a
endif
" End +mouse }}}

" Window title {{{
" DONT set window title if possible (for Terminal applications)--plays weird
if has('title')
  set notitle
endif
" End Window title }}}

" Syntax Highlighting {{{
" Switch syntax highlighting on when the terminal has colors or when using the
" GUI (which always has colors).
if &t_Co > 2 || has("gui_running")
  " Revert with ":syntax off".
  if ! exists("g:syntax_on")
    syntax enable
  endif

  " I like highlighting strings inside C comments.
  " Revert with ":unlet c_comment_strings".
  let c_comment_strings=1

  " Use bash as default shell highlighter (cf :h ft-sh-syntax)
  let g:is_bash = 1
endif
" End Syntax Highlighting }}}

" Undo {{{
set undofile undodir=~/.undo

if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
" End Undo }}}

" Autocmd {{{
" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  " Revert with ":filetype off".
  filetype plugin indent on

  " vimrc_last_cursor_position {{{
  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup vimrc_last_cursor_position | au! | augroup END"
  augroup vimrc_last_cursor_position
    au!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
          \ if line("'\"") >= 1 && line("'\"") <= line("$") |
          \   exe "normal! g`\"" |
          \ endif

  augroup END
  " End vimrc_last_cursor_position }}}

  " vimrc_autofoldcolumn {{{
  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup autofoldcolumn | au! | augroup END"
  augroup vimrc_autofoldcolumn
    au!

    " Automatically add foldcolumn if folds present
    " Needs Auto Origami plugin
    " au CursorHold,BufWinEnter,WinEnter * let &foldcolumn =
    "       \ auto_origami#Foldcolumn()
    au CursorHold,BufWinEnter,WinEnter * AutoOrigamiFoldColumn

  augroup END
  " End vimrc_autofoldcolumn }}}

  " vimrc_completion {{{
  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup completion | au! | augroup END"
  augroup vimrc_completion
    au!

    " Add omnicompletion using syntax if a file doesn't already have it
    au FileType * if &omnifunc == "" |
          \ setlocal omnifunc=syntaxcomplete#Complete |
          \ endif

    " Close the preview window after Insert-mode completion.
    if exists('##CompleteDone')
      autocmd CompleteDone * silent! pclose
    endif

  augroup END
  " End vimrc_completion }}}

  " vimrc_toggle_cursorline {{{
  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup vimrc_toggle_cursorline | au! | augroup END"
  augroup vimrc_toggle_cursorline
    au!

    " Don't use cursorline in Insert mode
    au InsertEnter * setlocal nocursorline
    au InsertLeave * setlocal cursorline

    " Turn it off for windows not in use
    au WinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline

  augroup END
  " End vimrc_toggle_cursorline }}}

  " vimrc_plugins {{{
  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup vimrc_plugins | au! | augroup END"
  augroup vimrc_plugins
    au!

    autocmd User AirlineAfterInit call AirlineInit()

    au User Startified setlocal signcolumn=no
    au User Startified setlocal cursorline

  augroup END
  "End vimrc_plugins }}}

  " vimrc_gitcommit {{{
  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup vimrc_gitcommit | au! | augroup END"
  augroup vimrc_gitcommit
    au!

    autocmd FileType gitcommit :normal! gg

  augroup END
  "End vimrc_gitcommit }}}

  " vimrc_CRfix {{{
  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup vimrc_CRfix | au! | augroup END"
  augroup vimrc_CRfix
    au!

    " Quickfix, Location list, &c. remap <CR> to work as expected
    autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
    autocmd CmdwinEnter * nnoremap <buffer> <CR> <CR>

  augroup END
  "End vimrc_CRfix }}}

  " dracula_fix {{{
  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup dracula_fix | au! | augroup END"
  augroup dracula_fix
    au!

    " Purpose:  A fix for dracula's cursorline
    autocmd ColorScheme dracula hi CursorLine cterm=underline
  augroup END
  " End dracula_fix }}}

  " helptags {{{
  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup vimrc_helptags | au! | augroup END"
  augroup vimrc_helptags
    au!

    " Generate all helptags
    autocmd VimEnter * helptags ALL

  augroup END

else
  set autoindent
endif " has("autocmd")
" End autocmd }}}

if has('langmap') && exists('+langremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If set (default), this may break plugins (but it's backward
  " compatible).
  set nolangremap
endif

" End complex options }}}

" End options }}}

" Mappings {{{

" Formatting {{{
" Don't use Ex mode, use Q for formatting
" Revert with ":unmap Q"
nnoremap Q gq
" Format the whole line
nnoremap QQ gqgq
" End Formatting }}}

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" Revert with ":iunmap <C-U>".
inoremap <C-U> <C-G>u<C-U>

" Search {{{
" Search very magically
" Seriously who doesn't want this
nnoremap / /\v
nnoremap ? ?\v

" Jump to lines with word
nnoremap <Leader>f [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>
" End Search }}}

" Substitute {{{
" Make & substitute with previous flags as well
nnoremap & :&&<CR>
" Visual mode
xnoremap & :&&<CR>
" End Substitute }}}

" Center {{{
" Center search results
nnoremap n nzz
nnoremap N Nzz
cnoremap <expr> <CR> getcmdtype() =~ '[/?]' ? '<CR>zz' : '<CR>'
" And other motions
nnoremap G Gzz
nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz
" Center cursor on click
" nnoremap <LeftMouse> <LeftMouse>zz
" End Center }}}

" Buffers {{{
" Make buffers like a jetpack: you can fly
nnoremap <Leader>b :ls<CR>:b<Space>
" End Buffers }}}

" gi goes to end of last insert (`^)
" gI goes to last change
nnoremap gI `.

" Remap x to delete into the blackhole buffer to make p work better
" noremap x "_x
" Use "0p if x clobbered your yank
" or "1,2... if it clobbered your delete
" or use named registers

" Line numbers {{{
" Toggle linenumbers
nnoremap <silent> <Leader>n :setlocal number!<CR>
nnoremap <silent> <Leader>N :setlocal relativenumber!<CR>
" End Line numbers }}}

" Unhighlight last search
nnoremap <silent> <Leader>h :nohlsearch<CR>

" Reload {{{
" Reload with F5
nnoremap <F5> :Reload<CR>
" Or <Leader>[rR]
nnoremap <Leader>r :Reload<CR>
nnoremap <Leader>R :ReloadAir<CR>
" End Reload }}}

" Quit with Q too, so you can hold shift
" Note that it displays ':q' even if you type ':Q'
cnoremap <expr> Q getcmdtype() == ':' ? 'q' : 'Q'

" Quickly input the directory of the current file on the command line
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h') . '/' : '%%'

" Function Keys {{{
" <F1> is help

" <F2> is edit file
nnoremap <F2> :call EditFile()<CR>
function! EditFile()
    call inputsave()
    let l:file = input("File: ", "", "file")
    call inputrestore()
    execute "edit" file
endfunction

" <[S-]F3> for normal searches
nnoremap <F3> /
nnoremap <S-F3> ?

" <F4> for insta quit
nnoremap <F4> qall!

" <F5> reloads (see "Reload")

" <F6> to cycle through tabs
nnoremap <F6> gt

" Not technically a mapping, but acts like one
" Toggle paste mode during an insert with <F7>
set pastetoggle=<F7>

" <F8> to spawn a terminal
nnoremap <F8> :terminal<CR>

" Panic button
nnoremap <F9> mzggg?G`z

" <F10> to compile
nnoremap <F10> :make<CR>

" <F11> to full screen a window
nnoremap <F11> :only<CR>

" <F12> to print
nnoremap <F12> :hardcopy<CR>

" End Function Keys }}}

" Leader shortcuts {{{
" Edit alternate file
nnoremap <Leader>` <C-^>
" Save
nnoremap <Leader>s :write<CR>
" Clear lines
nnoremap <Leader>cl 0D

" Quickly edit vimrc
nnoremap <Leader>ev :vsplit $MYVIMRC<CR>

" Surround word with "
nnoremap <Leader>" viw<esc>a"<esc>bi"<esc>lel
" Surround word with '
nnoremap <Leader>' viw<esc>a'<esc>bi'<esc>lel

" Surround visual selection with "
vnoremap <Leader>" <esc>`<i"<esc>`>a"<esc>
" Surround visual selection with '
vnoremap <Leader>' <esc>`<i'<esc>`>a'<esc>

" Quit quickly
nnoremap <silent> <Leader>q :q<CR>

" Suspended (by Matt Nathanson)
nnoremap <silent> <Leader>z :suspend<CR>
" End Leader shortcuts }}}

" Window mappings {{{

" Don't even let me use <C-w>
nnoremap <C-w>     <nop>
" Because I can use <Leader>w for everything
nnoremap <Leader>w <C-w>
nnoremap <Up> <C-w>k
nnoremap <S-Up> <C-w>K
nnoremap <Down> <C-w>j
nnoremap <S-Down> <C-w>J
nnoremap <Left> <C-w>h
nnoremap <S-Left> <C-w>H
nnoremap <Right> <C-w>l
nnoremap <S-Right> <C-w>L

" End Window mappings }}}

" Lines {{{
" Bubble single lines up and down
nnoremap - :.move +1<CR>
nnoremap _ :.move -2<CR>
" Bubble lines up and down in visual mode
vnoremap - :'<,'>move '>+1 \| normal! gv<CR>
vnoremap _ :'<,'>move '<-2 \| normal! gv<CR>

" Insert blank lines with <CR>
" See also augroup vimrc_CRfix
nnoremap <CR> o<esc>
" Yank to end rather than full line
" Like c/C and d/D
nnoremap Y y$
" End Lines }}}

" Operator motions {{{
" Operator motion for In Next ( in line
onoremap <silent> in( :<C-u>normal! f(vi(<CR>
" Operator motion for In Last ( in line
onoremap <silent> il( :<C-u>normal! F)vi(<CR>
" Operator motion for Around Next ( in line
onoremap <silent> an( :<C-u>normal! f(va(<CR>
" Operator motion for Around Last ( in line
onoremap <silent> al( :<C-u>normal! F)va(<CR>
" Operator motion for In Next { in line
onoremap <silent> in{ :<C-u>normal! f{vi{<CR>
" Operator motion for In Last { in line
onoremap <silent> il{ :<C-u>normal! F}vi{<CR>
" Operator motion for Around Next { in line
onoremap <silent> an{ :<C-u>normal! f{va{<CR>
" Operator motion for Around Last { in line
onoremap <silent> al{ :<C-u>normal! F}va{<CR>
" End Operator motions }}}

" End Mappings }}}

" Commands, Functions, that jazz {{{

" Diff {{{
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
" Undo with ":set nodiff foldmethod=marker"
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif
" End Diff }}}

" Reload {{{
" Reload vimrc
" If airline gets weird, try ":ReloadAir"
if !exists(":Reload")
  command -bar Reload source $MYVIMRC
endif

" Reload vimrc and refresh airline
if !exists(":ReloadAir")
  command -bar ReloadAir :Reload | AirlineRefresh
endif
" End Reload }}}

" AirlineInit {{{
" Customize airline (call in autocmd AirlineAfterInit)
function! AirlineInit()
  " Noop
endfunction
" End AirlineInit }}}

" End Commands }}}

" Plugin customization {{{

" Matchit {{{
if has('packages') && has('syntax') && has('eval')
  packadd! matchit
endif
" End Matchit }}}

" Man {{{
" Load Man plugin (see `:help Man` for more info)
runtime ftplugin/man.vim
let g:ft_man_open_mode='vert'
set keywordprg=:Man
" End Man }}}

" Netrw {{{
" Make netrw use a long listing
let g:netrw_liststyle=1
" Don't display baner
let g:netrw_banner=0
" Hide things not tracked by gitignore
" let g:netrw_list_hide=netrw_gitignore#Hide()
" Something is going screwy here^
" End netrw }}}

" Dracula {{{
if ! exists('g:colors_name')
  let g:dracula_italic = get(g:, 'dracula_italic', 0)
  let g:dracula_colorterm = get(g:, 'dracula_colorterm', 0)
  colorscheme dracula
endif
" End Dracula }}}

" Airline theme {{{
" set airline-theme if installed
let g:airline_theme='dracula'
" End Airline theme }}}

" Airline {{{
" customize airline if installed
" check if dictionary exists
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
"let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
"let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
"let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = '☰'
"let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
"let g:airline_symbols.paste = 'Þ'
"let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

" Enable windowswap
let g:airline#extensions#windowswap#enabled = 1
let g:airline#extensions#windowswap#indicator_text = 'WS'

" Word Count: Add liquid to defaults
" see airline/autoload/airline/extensions/wordcount.vim
let g:airline#extensions#wordcount#filetypes =
      \ '\vhelp|markdown|rst|org|text|asciidoc|tex|mail|liquid'
" End Airline }}}

" ALE {{{

let g:ale_lint_on_enter = 0
let g:airline#extensions#ale#enabled = 1

let g:ale_linters = {
      \ 'python': 'all'
      \}

" End ALE }}}

" Undotree {{{
" Customize undotree
nnoremap <silent> <Leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
" End Undotree }}}

" Pydoc {{{
" let g:pydoc_perform_mappings = 0
let g:pydoc_cmd = 'python -m pydoc'
" End Pydoc }}}

" Colorizer {{{
let g:colorizer_auto_filetype='css,html'
" End Colorizer }}}

" SplitJoin {{{
" Turn off mapings, because I couldn't make them work with <Leader>
let g:splitjoin_split_mapping = ""
let g:splitjoin_join_mapping = ""
" End SplitJoin }}}

" Startify {{{
" Options
let g:startify_session_dir = '~/.vimsessions'
let g:startify_files_number = 5
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 1
let g:startify_enable_special = 0
let g:startify_custom_indices = map(range(1,100), 'string(v:val)')

" Lists
let g:startify_lists = [
            \ { 'type': 'bookmarks', 'header': [ 'Bookmarks' ] },
            \ { 'type': 'dir', 'header': [ getcwd() ] },
            \ { 'type': 'files', 'header': [ 'Files' ] },
            \ { 'type': 'commands', 'header': [ 'Commands' ] },
            \ { 'type': 'sessions', 'header': [ 'Sessions' ] },
            \ ]

let g:startify_bookmarks = [
            \ { 'c': '$MYVIMRC'},
            \ ]

let g:startify_commands = [
            \ { 'E': 'Explore' },
            \ { 'p': 'e ~/thinkpad.txt' },
            \ { 'r': 'help reference' },
            \ { 'I': 'intro' },
            \ ]

" Header/Footer
if executable('fortune') && executable('cowsay')
    let g:startify_custom_header =
                \ "split(system('fortune -s | cowsay'), '\n')"
else
    let g:startify_custom_header = 'startify#fortune#cowsay()'
endif
let g:startify_custom_footer = [
            \ ' ',
            \ '[b]uffer [s]plit [v]ertical [t]ab',
            \ ' ',
            \ '[e]new   [q]uit',
            \ ]

" Highlighting
hi link StartifyFile DraculaLink
hi link StartifyHeader Normal
hi link StartifyFooter SpecialKey
" End Startify }}}

" Synstax {{{
nnoremap <Leader><Leader>s :echo synstax#UnderCursor()<CR>
" End Synstax }}}

" Markology {{{
let g:markology_disable_mappings = 1
" End Markology }}}
"
" Projectionist {{{
let g:projectionist_heuristics = {
      \ "_config.yml": {
      \   "*": {
      \     "console": &shell,
      \     "start": "bundle exec jekyll serve --watch --livereload",
      \     "dispatch": "bundle exec jekyll build",
      \   },
      \   "README.md": { "type": "doc" },
      \   "_config.yml": { "type": "config" },
      \   "_plugins/*.rb": { "type": "plugin" },
      \   "_layouts/*": { "type": "layout" },
      \   "_includes/*": { "type": "include" },
      \   "_posts/*": { "type": "post" },
      \   "_drafts/*": { "type": "draft" },
      \   "_data/*": { "type": "data" },
      \   "_sass/*": { "type": "partial" },
      \   "pages/*": { "type": "page" },
      \   "index.*": { "type": "page" },
      \   "assets/css/*": { "type": "css" },
      \   "assets/js/*": { "type": "js" },
      \   "assets/img/*": { "type": "img" },
      \ },
      \ "*.go": {
      \   "*.go": {
      \     "type": "source",
      \     "alternate": "{}_test.go",
      \     "dispatch": "go build",
      \     "make": "go"
      \   },
      \   "*_test.go": {
      \     "type": "test",
      \     "alternate": "{}.go",
      \     "dispatch": "go test ./...",
      \   },
      \ },
      \ "*.py": {
      \   "*.py": {
      \     "console": "python",
      \     "path": [ ".env" ],
      \   },
      \ },
      \ }
" End Projectionist }}}

" End plugin customization }}}

" Abbreviations {{{

iabbrev lorem Lorem ipsum dolor sit amet, consectetur adipiscing elit
iabbrev llorem Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Etiam lacus ligula, accumsan id imperdiet rhoncus, dapibus vitae arcu.  Nulla non quam erat, luctus consequat nisi
iabbrev lllorem Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Etiam lacus ligula, accumsan id imperdiet rhoncus, dapibus vitae arcu.  Nulla non quam erat, luctus consequat nisi.  Integer hendrerit lacus sagittis erat fermentum tincidunt.  Cras vel dui neque.  In sagittis commodo luctus.  Mauris non metus dolor, ut suscipit dui.  Aliquam mauris lacus, laoreet et consequat quis, bibendum id ipsum.  Donec gravida, diam id imperdiet cursus, nunc nisl bibendum sapien, eget tempor neque elit in tortor

iabbrev eemail ben.knoble@gmail.com
iabbrev wweb benknoble.github.io
iabbrev ssig --<CR>David Ben Knoble<CR>ben.knoble@gmail.com
iabbrev ccopy © Copyright David Ben Knoble 2018, all rights reserved.

" End abbreviations }}}
