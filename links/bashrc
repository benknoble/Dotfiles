# vim: foldmethod=marker
# If not running interactively, don't do anything
case $- in
  *i*) ;;
  *) return ;;
esac

# reload profile
alias reload='. ~/.bashrc >/dev/null && echo "reloaded"'

# VARS {{{

# env {{{

reset_editor() {
  # set default editor to vim
  export VISUAL="$(command -v vim)"
  export EDITOR="$VISUAL"
  export MANPAGER='vim -M +MANPAGER -'
}

# use my color scheme for ls
export LSCOLORS="gxfxcxdxbxegedabagacad"

# use less on any system
export LESS="RWi"
export PAGER="less"

export PYTHONSTARTUP=~/.pythonrc

export HOMEBREW_NO_AUTO_UPDATE=true
export HOMEBREW_INSTALL_CLEANUP=true

# env }}}

# shell {{{

# set PS2
# PS2="λ "
PS2="» "
# set PS3
PS3="$PS2"

# set {{{

# don't accidentally overwrite files with '>' (use '>|' to force overwriting)
set -o noclobber

# set }}}

# shopt {{{

HISTSIZE=100000
HISTFILESIZE="$HISTSIZE"
shopt -s histappend

shopt -s autocd
shopt -s globstar

# shopt }}}

# keys {{{

# let 'space' magically expand history command-line fu
# use M-C-e to expand *all* command-line fu
bind "SPACE: magic-space"

# use vi readline bindings
set -o vi

# keys }}}

# term {{{

# disable flow control
stty -ixon -ixoff

# term }}}

# shell }}}

# personal {{{

if command -v brew &>/dev/null ; then
  has_brew=true
else
  has_brew=false
fi

# OS test
case "$OSTYPE" in
  darwin* ) OS=mac ;;
  linux* ) OS=linux ;;
esac

# file to hold private keys
private=~/.private

# completion paths
if "$has_brew" ; then
  brew_prefix="$(brew --prefix)"
fi
comp_prefix="${brew_prefix:-/usr/local/}"
bashcomp="$comp_prefix"/share/bash-completion/bash_completion
completion_dir="$comp_prefix"/etc/bash_completion.d

# personal }}}

# VARS }}}

# sourcing {{{

# ~/.bash files
for file in ~/.bash/*.bash ; do
  source "$file"
done
for file in ~/.bash/"$OS"/*.bash ; do
  source "$file"
done

# source .private for meant to never be seen
[[ -r "$private" ]] && source "$private"

# source anything in ~/.personal
if [[ -d ~/.personal ]]; then
  for file in ~/.personal/*.bash; do
    if [[ -r "$file" ]]; then
      source "$file"
    fi
  done
  for file in ~/.personal/"$OS"/*.bash ; do
    if [[ -r "$file" ]]; then
      source "$file"
    fi
  done
  # add ~/.personal/bin to path
  if [[ -d ~/.personal/bin ]]; then
    pathadd "$HOME/.personal/bin"
  fi
fi

# activate a virtualenv if present (helpful for tmux)
if [[ -r "$PWD"/.env/bin/activate ]]; then
  source "$PWD"/.env/bin/activate
fi

# sourcing }}}

# custom {{{
# this is the stuff that is affected by sourcing, such as changing variables

# Handle commands not found
if [[ "$(type -t command_not_found_handle)" != function ]]; then
  command_not_found_handle() {
    {
      echo -e "$BRed"Command not found: "$NC$BYellow$1$NC"
      shift
      if [[ $# -gt 0 ]]; then
        echo "$#" args: "$(join_by ', ' "${@@Q}")"
      fi
      echo -e Try "$BGreen"'`displayPath`'"$NC" to see the path
    } >&2
    return 127
  }
fi

# paths {{{

# Add bin folder for scripts to path
pathadd "$HOME/.bin"

if "$has_brew" ; then

  pathadd_front "$brew_prefix/bin"

  brew_fix() {
    local type="$1"
    local path="${!type}"
    local prepend="$2"
    case "$path" in
      "$prepend"* ) true ;;
      * ) eval export "$type=$prepend:$path" ;;
    esac
  }
  # first clear manpath on macs
  case "$OS" in
    mac ) export MANPATH=
  esac
  brew_fix MANPATH "$brew_prefix/share/man"
  brew_fix INFOPATH "$brew_prefix/share/info"

fi

# go
[[ -d ~/go/bin ]] && pathadd ~/go/bin

reset_editor

# paths }}}

# completion {{{

# pip bash completion start
_pip_completion()
{
  COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
    COMP_CWORD=$COMP_CWORD \
    PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end

# vault completion
vault_path="$(command -v vault)"
if [[ -n "$vault_path" ]] ; then
  complete -C "$vault_path" vault
fi

# bash completion
[[ -r "$bashcomp" ]] && source "$bashcomp"
# source files in completion_dir
for file in "$completion_dir"/*; do
  if [[ -r "$file" ]]; then
    source "$file"
  fi
done

# alias completion
if [[ "$(type -t __git_complete)" == function ]] && alias | grep -q "g='git'" ; then
  __git_complete g _git
fi

# completion }}}

# custom }}}

unset bashcomp
if "$has_brew" ; then
  unset brew_fix
  unset brew_prefix
fi
unset completion_dir
unset comp_prefix
unset file
unset message
unset OS
unset private
unset vault_path
