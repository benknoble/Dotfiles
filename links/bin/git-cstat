#! /usr/bin/env bash

set -euo pipefail

USAGE='[-h] (count | len (min|max|avg)) [rev-list options]

Display commit statistics
Filter commits based on [rev-list options]'
SUBDIRECTORY_OK=true

# source git-sh-setup for some helpers
set +u
source "$(git --exec-path)"/git-sh-setup
set -u

SIZER=(
  wc
  # count words
  -w
)

size() {
  local commit="$1"
  git log "$commit" -1 --format=%B | "${SIZER[@]}" | tr -d ' '
}

commits_list() {
  command=(
    git
    rev-list
    # start somewhere
    --all
  )
  if (($# > 0)) ; then
    command+=("$@")
  fi
  "${command[@]}" 2>/dev/null
}

commit_count() {
  commits_list "$@" | wc -l | tr -d ' '
}

commit_len_min() {
  local commits=()
  local min_c
  local min=99999999999
  mapfile -t commits < <(commits_list "$@")
  for commit in "${commits[@]}" ; do
    c_size="$(size "$commit")"
    if ((c_size < min)) ; then
      min="$c_size"
      min_c="$commit"
    fi
  done
  printf '%s\n' "$min $min_c"
}

commit_len_max() {
  local commits=()
  local max_c
  local max=0
  mapfile -t commits < <(commits_list "$@")
  for commit in "${commits[@]}" ; do
    c_size="$(size "$commit")"
    if ((c_size > max)) ; then
      max="$c_size"
      max_c="$commit"
    fi
  done
  printf '%s\n' "$max $max_c"
}

commit_len_avg() {
  local commits=()
  local sum=0
  mapfile -t commits < <(commits_list "$@")
  for commit in "${commits[@]}" ; do
    c_size="$(size "$commit")"
    ((sum+=c_size))
  done
  printf '%s\n' '5k' "$sum" "${#commits[@]}" '/p' | dc
}

main() {
  (($# >= 1)) || usage
  case "$1" in
    count) commit_count "${@:2}" ;;
    len)
      (($# >= 2)) || usage
      commit_len_"$2" "${@:3}"
      ;;
    *) usage ;;
  esac
}

main "$@"
