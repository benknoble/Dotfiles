#!/usr/bin/env bash

# Build a commit frequency histogram

# The MIT License (MIT)

# Copyright (c) 2019 Jacob Zimmerman

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# https://github.com/jez/git-heatmap

ccyan="$(echo -ne '\033[0;36m')"
cnone="$(echo -ne '\033[0m')"

set -euo pipefail

ARGV=()
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -n)
      LIMIT="$2"
      shift
      shift
      ;;
    -b|--base)
      REVIEW_BASE="$2"
      shift
      shift
      ;;
    -c|--char)
      CHAR="$2"
      shift
      shift
      ;;
    --width)
      WIDTH="$2"
      shift
      shift
      ;;
    -f|--filter)
      FILTER="$2"
      shift
      shift
      ;;
    -h)
      cat <<EOF
Heatmap of oft-edited files.

Usage:
  git heatmap [options] [<path>...]

Options:
  -n <top>                      Limit to top <n> files. [default: 30]
  --width <n>                   Limit histogram to <n> chars.
  -b <branch>, --base <branch>  Compare relative to <branch>. If on <branch>,
                                show heatmap for entire repo.
                                [default: HEAD@{upstream}]
  -c <char>, --char <char>      Use <char> to draw the bars. [default: █]
  -f <cmd>, --filter <cmd>      Filter output through <cmd> before creating the
                                the histogram.
  -h                            Show this message.
EOF
      exit
      ;;
    *)
      ARGV+=("$1")
      shift
      ;;
  esac
done

LIMIT=${LIMIT:-30}
REVIEW_BASE=${REVIEW_BASE:-'HEAD@{upstream}'}
CHAR=${CHAR:-█}
WIDTH=${WIDTH:-60}
FILTER=${FILTER:-cat -}

files() {
  # https://stackoverflow.com/questions/7577052/
  git log --name-status --pretty=format: -- "${ARGV[@]+"${ARGV[@]}"}" | \
    cut -f 2-
}

color_name() {
  if [ -t 1 ]; then
    sed -e "s/\(..*\/\)*\(.[^|]*\) |/\1$ccyan\2$cnone |/"
  else
    cat -
  fi
}

filter() {
  grep '.' |
    eval "$FILTER" |
    sort |
    uniq -c |
    sort -nr |
    head -n "$LIMIT"
}

histogram() {
  "$bars" --bar "$CHAR" --width "$WIDTH"
}

if command -v barchart &> /dev/null; then
  bars="barchart"
elif command -v bars &> /dev/null; then
  bars="bars"
else
  >&2 echo "$0: This command requires a command called 'bars' or 'barchart'. See the README."
  exit 1
fi

if [[ "$(git rev-parse HEAD)" == "$(git rev-parse "$REVIEW_BASE")" ]]; then
  # If on master, show heatmap for whole repo
  files | filter | histogram | color_name
else
  MERGE_BASE="$(git merge-base HEAD "$REVIEW_BASE")"
  files |
    # If on separate branch, show heatmap for files changed since master
    grep -xF -f <(git diff --name-only "$MERGE_BASE") |
    filter |
    histogram |
    color_name
fi
