#! /usr/bin/env bash
# Usage: git overwritten [<base=HEAD@{upstream}>] [<head=HEAD>]
#
# Aggregates git blame information about original owners of lines changed or
# removed in the '<base>...<head>' diff. Use this when asking for help in a
# clean repo or when asking for review. See also git-touching.
#
# Each line of output represents a past commit, and consists of:
# - number of lines from the commit that this diff affects
# - commit hash
# - commit subject message
# - commit date
# - author name
#
# The commits are listed from most affected to least.
#
# A handy trick is
# # git show $(git overwritten | awk '{print $2}')
#
# Author: Mislav MarohniÄ‡
# Original script: https://mislav.net/2014/02/hidden-documentation/
# Modified by David B. Knoble (and still needs some serious work)

set -euo pipefail

unset head
unset base

abort() {
  "$0" --help | head -1 >&2
  exit 1
}

while [ "$#" -gt 0 ]; do
  case "$1" in
  -h | --help )
    sed -ne '/^#/!q;s/.\{1,2\}//;1d;p' < "$0"
    exit 0
    ;;
  -* | "") abort ;;
  * )
    if [ -z "${base:-}" ]; then base="$1"
    elif [ -z "${head:-}" ]; then head="$1"
    else abort
    fi
    ;;
  esac
  shift 1
done

base=${base:-'HEAD@{upstream}'}
head="${head:-HEAD}"

color=auto
[ -t 1 ] && color=always

git diff "${base}...${head}" --diff-filter=DM --no-prefix -w -U0 | grep -v '^+' | awk '
  function print_range() {
    printf "-L %d,%d -- %s\n", start, stop, file
  }
  /^--- / {
    sub(/^--- /, "")
    file = $0
    next
  }
  /^-/ {
    if (!start) start = stop = diffstart
    else stop += 1
    next
  }
  start {
    print_range()
    start = 0
  }
  /^@@ / {
    sub(/^-/, "", $2)
    diffstart = int($2)
    start = 0
  }
  END {
    if (start) print_range()
  }
' | xargs -L1 git blame --line-porcelain "$base" | awk -v OFS=$'\t' '
/^[0-9a-f]{40} / { print $1 }
' | xargs -L1 git show --color="$color" --no-patch --pretty='format:%C(auto)%h (%s, %as) by %an%n' |
  sort | uniq -c | sort -rn
