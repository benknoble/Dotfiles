# reload profile easily
bind-key -N 'reload configuration' r { source-file ~/.tmux.conf; display-message "reload done" }

set -g prefix C-Space
unbind-key C-b
bind-key -N 'prefix' C-Space send-prefix

# Options

# don't use a login shell: explicitly set default-command
set -g default-command "$SHELL"

# set color profile
set -g default-terminal "tmux-256color"

# 0 is too far away from reasonable numbers
set -g base-index 1
set -g renumber-windows on
setw -g pane-base-index 1

# activity
set -g activity-action other
set -g visual-activity on
setw -g monitor-activity on
set -g monitor-silence 0

# enable mouse
set -g mouse on

# vim timeout problems
set -sg escape-time 0

# Color scheme/Status Layout

TMUX_BG='#22212c' # dracula bg
TMUX_FG='#f8f8f2' # dracula fg
TMUX_ACCENT='#9580ff' # dracula comment
TMUX_HIGHLIGHT='#8affea' # dracula green

set -g status-justify centre
set -g status-left-length 32
set -g status-right-length 150
set -g status-style bg=$TMUX_BG,fg=$TMUX_FG

set -g message-style bg=$TMUX_ACCENT,fg=$TMUX_FG
set -g message-command-style bg=$TMUX_FG,fg=$TMUX_ACCENT
set -g display-time 2000

set -g status-left "#[bg=$TMUX_ACCENT] #S:#W.#P #{?pane_pipe,P,} #{?client_readonly,RO,}#[bg=$TMUX_BG]"
set -g status-right "#[bg=$TMUX_ACCENT] #h | %R | %d %B %Y #[bg=$TMUX_BG]"
set -g window-status-format " #I #W #F "
set -g window-status-current-style bg=$TMUX_ACCENT,fg=$TMUX_FG
set -g window-status-current-format " #I #W #F#{?synchronize-panes,S,} "
set -g window-status-activity-style bg=$TMUX_HIGHLIGHT,fg=$TMUX_BG
set -g window-status-separator "|"

set -g pane-border-style bg=$TMUX_BG,fg=$TMUX_FG
set -g pane-active-border-style bg=$TMUX_ACCENT,fg=$TMUX_BG
set -g display-panes-time 2000
set -g display-panes-colour $TMUX_ACCENT
set -g display-panes-active-colour $TMUX_HIGHLIGHT

set -g mode-style bg=$TMUX_ACCENT,fg=$TMUX_FG

# Key Bindings

bind-key -N 'switch to pane (left)' h select-pane -L
bind-key -N 'switch to pane (down)' j select-pane -D
bind-key -N 'switch to pane (up)' k select-pane -U
bind-key -N 'switch to pane (right)' l select-pane -R

bind-key -N 'previous window' Left previous-window
bind-key -N 'next window' Right next-window
bind-key -N 'last window' C-l last-window

bind-key -N 'open session picker' s choose-tree -Z -s -O time

unbind %
unbind '"'
bind-key -N 'vsplit' | split-window -h
bind-key -N 'vsplit' \\ split-window -h
bind-key -N 'split' - split-window -v

# more vim-like (esp. copy)
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

bind-key -N 'launch vim' v new-window -a vim
bind-key -N 'launch vim with command' V command-prompt -p 'vim +' { new-window -a vim +"%%" }

bind-key -N 'synchronize panes (toggle)' S set-window-option synchronize-panes

bind-key -N 'record pane output (toggle)' C-p pipe-pane -o 'cat >>~/tmux-output.#S-#P'

# quickly fire up gitsh if available
if-shell "command -v gitsh" {
    bind-key -N 'launch gitsh' g split-window -h -p 50 gitsh
} {
    unbind-key g
}

bind-key -N 'run command in all panes on the server' E command-prompt -p "Command:" {
    run "tmux list-panes -a -F '##{session_name}:##{window_index}.##{pane_index}' | xargs -I PANE tmux send-keys -t PANE '%1' Enter"
}

bind-key -N 'run command in all panes in current session' C-e command-prompt -p "Command:" {
    run "tmux list-panes -s -F '##{session_name}:##{window_index}.##{pane_index}' | xargs -I PANE tmux send-keys -t PANE '%1' Enter"
}
